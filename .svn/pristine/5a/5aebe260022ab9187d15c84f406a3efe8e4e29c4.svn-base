package tms.congestion;

import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;
import tms.sensors.DemoPressurePad;
import tms.sensors.DemoSpeedCamera;
import tms.sensors.DemoVehicleCount;
import tms.sensors.Sensor;
import java.util.ArrayList;
import java.util.List;

public class AveragingCongestionCalculatorTest {
    private AveragingCongestionCalculator averagingCongestionCalculator;
    private AveragingCongestionCalculator emptyCongestionCalculator;
    private int[] data = new int[]{1,2,3,4,5,6,7,8,9,10};
    private List<Sensor> sensorList;


    @Before
    public void setup() {
        data = new int[]{1,2,3,4,5,6,7,8,9,10};

        DemoPressurePad demoPressurePad = new DemoPressurePad(data, 50);
        DemoSpeedCamera demoSpeedCamera = new DemoSpeedCamera(data, 70);
        DemoVehicleCount demoVehicleCount = new DemoVehicleCount(data, 20);
        sensorList = new ArrayList<>();
        List<Sensor> emptySensorList = new ArrayList<>();
        sensorList.add(demoPressurePad);
        sensorList.add(demoVehicleCount);
        sensorList.add(demoSpeedCamera);

        averagingCongestionCalculator =
                new AveragingCongestionCalculator(sensorList);
        emptyCongestionCalculator =
                new AveragingCongestionCalculator(emptySensorList);

    }

    @Test
    public void calculateCongestion() {
        Assert.assertEquals(65,
                averagingCongestionCalculator.calculateCongestion());
    }

    @Test
    public void calculateCongestionOnEmptyList() {
        Assert.assertEquals(0,
                emptyCongestionCalculator.calculateCongestion());
    }

    @Test
    public void calculateCongestionOnNegativeValues() {
        DemoPressurePad demoPressurePad = new DemoPressurePad(data, -50);
        sensorList.add(demoPressurePad);
        AveragingCongestionCalculator newAveragingCongestionCalculator
                = new AveragingCongestionCalculator(sensorList);
        Assert.assertEquals(49,
                newAveragingCongestionCalculator.calculateCongestion());
    }

    @Test
    public void singleEntryTest() {
        DemoPressurePad demoPressurePad = new DemoPressurePad(data, 50);
        List<Sensor> newSensorList = new ArrayList<>();
        newSensorList.add(demoPressurePad);
        AveragingCongestionCalculator newAveragingCongestionCalculator
                = new AveragingCongestionCalculator(newSensorList);
        Assert.assertEquals(2,
                newAveragingCongestionCalculator.calculateCongestion());
    }
}
