package tms.network;

import tms.intersection.Intersection;
import tms.route.Route;
import tms.sensors.Sensor;
import tms.util.DuplicateSensorException;
import tms.util.IntersectionNotFoundException;
import tms.util.InvalidOrderException;
import tms.util.RouteNotFoundException;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Represents a network of intersections connected by routes.
 */
public class Network {
    private List<Intersection> intersections;
    private int yellowTime;

    /**
     * Creates a new empty network with no intersections.
     */
    public Network() {
        intersections = new ArrayList<>();
        yellowTime = 1;
    }

    /**
     * Returns the yellow time for all traffic lights in this network.
     *
     * @return traffic light yellow time (in seconds)
     */
    public int getYellowTime() {
        return yellowTime;
    }

    /**
     * Sets the time that lights appear yellow between turning
     * from green to red (in seconds) for all new traffic lights
     * added to this network.
     *
     * @param yellowTime - new yellow time for all new traffic lights
     *                  in network
     * @throws IllegalArgumentException - if yellowTime < 1
     */
    public void setYellowTime(int yellowTime) {
        if (yellowTime < 1) {
            throw new IllegalArgumentException("yellowTime must be > 0");
        } else {
            this.yellowTime = yellowTime;
        }
    }

    /**
     * Creates a new intersection with the given ID and adds it to
     * this network.
     *
     * @param id - identifier of the intersection to be created
     * @throws IllegalArgumentException - if an intersection
     * already exists with the given ID, or if the given ID contains
     * the colon character (:), or if the id contains only
     * (space, newline, tab, etc.) characters
     * @requires id != null
     */
    public void createIntersection(String id)
            throws IllegalArgumentException {
        if (id.contains(":") || id.isBlank()) {
            throw new IllegalArgumentException();
        }

        try {
            findIntersection(id);
            throw new IllegalArgumentException();
        } catch (IntersectionNotFoundException e) {
            intersections.add(new Intersection(id));
        }
    }

    /**
     * Creates a connecting route between the two intersections with the
     * given IDs.
     *
     * @param from - ID of origin intersection
     * @param to - ID of destination intersection
     * @param defaultSpeed - speed limit of the route to create
     * @throws IntersectionNotFoundException - if no intersection exists
     * with an ID of 'from' or 'to'
     * @throws IllegalStateException - if a route already exists between
     * the given two intersections
     * @throws IllegalArgumentException - if defaultSpeed is negative
     * duration > yellowTime
     */
    public void connectIntersections(String from,
                                      String to,
                                      int defaultSpeed)
            throws IntersectionNotFoundException,
            IllegalStateException,
            IllegalArgumentException {

        if (defaultSpeed < 0) {
            throw new IllegalArgumentException();
        }

        findIntersection(to).addConnection(
                findIntersection(from),
                defaultSpeed
        );
    }

    /**
     * Adds traffic lights to the intersection with the given ID.
     *
     * @param intersectionId - ID of intersection to add traffic lights to
     * @param duration - number of seconds between traffic light cycles
     * @param intersectionOrder - list of origin intersection IDs, traffic
     *                          lights will go green in this order
     * @throws IntersectionNotFoundException - if no intersection with the
     * given ID exists
     * @throws InvalidOrderException - if the order specified is not a
     * permutation of the
     * intersection's incoming routes; or if order is empty
     * @throws IllegalArgumentException - if the given duration is less than
     * the network's yellow time plus one
     * duration > yellowTime
     */
    public void addLights(String intersectionId,
                           int duration,
                           List<String> intersectionOrder)
            throws IntersectionNotFoundException,
            InvalidOrderException,
            IllegalArgumentException {

        if (intersectionOrder.isEmpty()) {
            throw new InvalidOrderException();
        }

        if (duration < yellowTime + 1) {
            throw new IllegalArgumentException();
        }

        List<Route> routeList = new ArrayList<>(intersectionOrder.size());
        for (String currentIntersection: intersectionOrder) {
            try {
                routeList.add(this.getConnection(
                        currentIntersection,
                        intersectionId
                ));
            } catch (RouteNotFoundException e) {
                e.printStackTrace();
            }
        }

        // Check if given order is not a permutation of incomingRoutes
        boolean permutationCheck = false;
        for (Route routeInIntersection: findIntersection(intersectionId)
                .getConnections()) {
            for (Route routeInList: routeList) {
                if (routeInList.equals(routeInIntersection)) {
                    permutationCheck = true;
                }
            }

            if (permutationCheck) {
                permutationCheck = false;
            } else {
                throw new InvalidOrderException();
            }
        }

        findIntersection(intersectionId).addTrafficLights(
                routeList,
                yellowTime,
                duration
        );
    }

    /**
     * Adds an electronic speed sign on the route between the two
     * given intersections.
     *
     * @param from - ID of origin intersection
     * @param to - ID of destination intersection
     * @param initialSpeed - initial speed to be displayed on speed sign
     * @throws IntersectionNotFoundException - if no intersection exists
     * with an ID given by 'from' or 'to'
     * @throws RouteNotFoundException - if no route exists between the
     * two given intersections
     * @throws IllegalArgumentException - if the given speed is negative
     */
    public void addSpeedSign(String from,
                              String to,
                              int initialSpeed)
            throws IntersectionNotFoundException,
            RouteNotFoundException {

        if (initialSpeed < 0) {
            throw new IllegalArgumentException();
        }

        getConnection(from, to).addSpeedSign(initialSpeed);
    }

    /**
     * Sets the speed limit on the route between the two given intersections.
     *
     * @param from - ID of origin intersection
     * @param to - ID of destination intersection
     * @param newLimit - new speed limit
     * @throws IntersectionNotFoundException - if no intersection exists
     * with an ID given by 'from' or 'to'
     * @throws RouteNotFoundException - if no route exists between the
     * two given intersections
     * @throws IllegalStateException - if the specified route does not
     * have an electronic speed sign
     * @throws IllegalArgumentException - if the given speed is negative
     */
    public void setSpeedLimit(String from,
                               String to,
                               int newLimit)
            throws IntersectionNotFoundException,
            RouteNotFoundException {
        if (newLimit < 0) {
            throw new IllegalArgumentException();
        }

        if (getConnection(from, to).hasSpeedSign()) {
            getConnection(from, to).setSpeedLimit(newLimit);
        } else {
            throw new IllegalStateException();
        }
    }

    /**
     * Sets the duration of each green-yellow cycle for the given
     * intersection's traffic lights.
     *
     * @param intersectionId - ID of target intersection
     * @param duration - new duration of traffic lights
     * @throws IntersectionNotFoundException - if no intersection exists
     * with an ID given by 'intersectionId'
     * @throws IllegalStateException - IllegalStateException - if the
     * given intersection has no traffic lights
     * @throws IllegalArgumentException - if the given duration is less
     * than the network's yellow time plus one
     */
    public void changeLightDuration(String intersectionId,
                                     int duration)
            throws IntersectionNotFoundException {
        if (!findIntersection(intersectionId).hasTrafficLights()) {
            throw new IllegalStateException();
        }

        if (duration < yellowTime + 1) {
            throw new IllegalArgumentException();
        }

        findIntersection(intersectionId).setLightDuration(duration);
    }

    /**
     * Returns the route that connects the two given intersections.
     *
     * @param from - ID of origin intersection
     * @param to - ID of destination intersection
     * @throws IntersectionNotFoundException - if no intersection exists
     * with an ID given by 'from' or 'to'
     * @throws RouteNotFoundException - if no route exists between the
     * two given intersections
     * @return Route that connects these intersections
     */
    public Route getConnection(String from,
                               String to)
            throws IntersectionNotFoundException,
            RouteNotFoundException {
        return findIntersection(to).getConnection(findIntersection(from));
    }

    /**
     * Adds a sensor to the route between the two intersections with
     * the given IDs.
     *
     * @param from - ID of origin intersection
     * @param to - ID of destination intersection
     * @param sensor - sensor instance to add to the route
     * @throws DuplicateSensorException - if a sensor already exists on
     * the route with the same type
     * @throws IntersectionNotFoundException - if no intersection exists
     * with an ID given by 'from' or 'to'
     * @throws RouteNotFoundException - if no route exists between the
     * two given intersections
     */
    public void addSensor(String from,
                           String to,
                           Sensor sensor)
            throws DuplicateSensorException,
            IntersectionNotFoundException,
            RouteNotFoundException {
        getConnection(from, to).addSensor(sensor);
    }

    /**
     * Returns the congestion level on the route between the two given
     * intersections.
     *
     * @param from - ID of origin intersection
     * @param to - ID of destination intersection
     * @throws IntersectionNotFoundException - if no intersection exists
     * with an ID given by 'from' or 'to'
     * @throws RouteNotFoundException - if no connecting route exists
     * between the given two intersections
     * @return congestion level (integer between 0 and 100) of connecting
     * route
     */
    public int getCongestion(String from,
                              String to)
            throws IntersectionNotFoundException,
            RouteNotFoundException {
        return getConnection(from, to).getCongestion();
    }

    /**
     * Attempts to find an Intersection instance in this network with the same
     * identifier as the given 'id' string.
     *
     * @param id - intersection identifier to search for
     * @throws IntersectionNotFoundException - if no intersection could be
     * found with the given identifier
     * @return the intersection that was found (if one was found)
     */
    public Intersection findIntersection(String id)
            throws IntersectionNotFoundException {
        for (Intersection currentIntersection: intersections) {
            if (currentIntersection.getId().equals(id)) {
                return currentIntersection;
            }
        }

        throw new IntersectionNotFoundException();
    }

    /**
     * Creates a new connecting route in the opposite direction to
     * an existing route.
     *
     * @param from - ID of intersection that the existing route starts at
     * @param to - ID of intersection that the existing route ends at
     * @throws IntersectionNotFoundException - if no intersection exists
     * with an ID given by 'from' or 'to'
     * @throws RouteNotFoundException - if no connecting route exists
     * between the given two intersections
     * @throws IllegalStateException - if a route already exists in the
     * opposite direction to the existing route
     */
    public void makeTwoWay(String from,
                            String to)
            throws IntersectionNotFoundException,
            RouteNotFoundException {
        int defaultSpeed = getConnection(from, to).getSpeed();
        connectIntersections(to, from, defaultSpeed);

        if (getConnection(from, to).hasSpeedSign()) {
            getConnection(to, from).addSpeedSign(defaultSpeed);
        }
    }

    /**
     * Returns true if and only if this sensor is equal to the other
     * given network.
     *
     * @param o - other object to compare equality
     * @return true if equal, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Network network = (Network) o;
        return Objects.equals(intersections, network.intersections) &&
                intersections.size() == network.intersections.size();
    }

    /**
     * Returns the hashcode of this object.
     *
     * @return int hashcode of this
     */
    @Override
    public int hashCode() {
        return Objects.hash(intersections);
    }

    /**
     * Helper method to find number of Routes in Network
     *
     * @return number of Routes
     */
    private int numRoutes() {
        int numRoutes = 0;
        for (Intersection intersectionFrom: intersections) {
            for (Intersection intersectionTo: intersections) {
                try {
                    getConnection(
                            intersectionFrom.getId(),
                            intersectionTo.getId()
                    );
                    numRoutes++;
                } catch (RouteNotFoundException
                        | IntersectionNotFoundException r) {
                    // Squashed
                }
            }
        }

        return numRoutes;
    }

    /**
     * Returns the string representation of this network.
     *
     * @return string representation of this network
     */
    public String toString() {
        StringBuilder toString = new StringBuilder(
                getIntersections().size() + System.lineSeparator() +
                numRoutes() + System.lineSeparator() +
                getYellowTime() + System.lineSeparator());

        // Adding Intersection & IntersectionLights details
        for (Intersection intersection: getIntersections()) {
            toString.append(intersection.toString())
                    .append(System.lineSeparator());
        }

        // Adding Route & Sensor details
        for (Intersection intersectionFrom: intersections) {
            for (Intersection intersectionTo: intersections) {
                // Routes
                Route route = null;
                try {
                    route = getConnection(
                            intersectionFrom.getId(),
                            intersectionTo.getId()
                    );
                    toString.append(intersectionFrom.getId() + ":")
                            .append(intersectionTo.getId() + ":")
                            .append(route.getSpeed() + ":")
                            .append(route.getSensors().size() +
                                    (route.hasSpeedSign() ? ":"
                                    + route.getSpeed() : ""))

                            .append(System.lineSeparator());
                } catch (RouteNotFoundException
                        | IntersectionNotFoundException e) {
                    // Squash
                }

                // Sensors
                try {
                    for (Sensor sensor: route.getSensors()) {
                        toString.append(sensor.toString())
                                .append(System.lineSeparator());
                    }
                } catch (NullPointerException n) {
                    // Squash
                }
            }
        }

        return toString.toString();
    }

    /**
     * Returns a new list containing all the intersections in this network.
     *
     * @return list of all intersections in this network
     */
    public List<Intersection> getIntersections() {
        return new ArrayList<>(this.intersections);
    }
}
