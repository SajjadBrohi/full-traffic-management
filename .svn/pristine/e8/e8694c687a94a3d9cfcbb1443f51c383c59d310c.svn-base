package tms.intersection;

import tms.route.Route;
import tms.route.TrafficSignal;
import tms.util.TimedItem;
import tms.util.TimedItemManager;

import java.util.List;

public class IntersectionLights implements TimedItem {
    private List<Route> connections;
    private Route currentRoute;
    private int yellowTime;
    private int duration;
    private int secondsLapsed;
    private int currentRouteIndex;

    public IntersectionLights(List<Route> connections,
                               int yellowTime,
                               int duration) {

        this.connections = connections;
        currentRouteIndex = 0;
        currentRoute = this.connections.get(currentRouteIndex);
        currentRoute.setSignal(TrafficSignal.GREEN);

        this.yellowTime = yellowTime;
        this.duration = duration;
        this.secondsLapsed = 0;

        TimedItemManager.getTimedItemManager().registerTimedItem(this);
    }

    public int getYellowTime() {
        return yellowTime;
    }

    public void setDuration(int duration) {
        this.duration = duration;
        currentRoute.setSignal(TrafficSignal.GREEN);
        secondsLapsed = 0;
    }

    public void oneSecond() {
        if (connections.isEmpty()) {
            return;
        }

        secondsLapsed++;

        if (currentRoute.getTrafficLight().getSignal() == TrafficSignal.GREEN) {
            if (secondsLapsed == (duration - yellowTime)) {
                currentRoute.setSignal(TrafficSignal.YELLOW);
                secondsLapsed = 0;
            }
        } else if (currentRoute.getTrafficLight().getSignal() == TrafficSignal.YELLOW) {
            if (secondsLapsed == yellowTime) {
                currentRoute.setSignal(TrafficSignal.RED);
                currentRouteIndex++;

                if (currentRouteIndex + 1 > connections.size()) {
                    currentRouteIndex = 0;
                }

                currentRoute = this.connections.get(currentRouteIndex);
                currentRoute.setSignal(TrafficSignal.GREEN);
                secondsLapsed = 0;
            }
        }
    }

    public String toString() {
        StringBuilder toString = new StringBuilder(duration + ":");
        for (int i = 0; i < connections.size(); i++) {
            if (i + 1 == connections.size()) {
                toString.append(connections.get(i).getFrom().getId());
            } else {
                toString.append(connections.get(i).getFrom().getId() + ",");
            }
        }

        return toString.toString();
    }
}
