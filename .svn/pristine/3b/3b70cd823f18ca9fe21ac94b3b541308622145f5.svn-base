package tms.network;

import tms.intersection.Intersection;
import tms.route.Route;
import tms.sensors.Sensor;
import tms.util.DuplicateSensorException;
import tms.util.IntersectionNotFoundException;
import tms.util.InvalidOrderException;
import tms.util.RouteNotFoundException;

import java.util.ArrayList;
import java.util.List;

public class Network {
    private List<Intersection> intersections;
    private int yellowTime;

    public Network() {
        intersections = new ArrayList<>();
    }

    public int getYellowTime() {
        return yellowTime;
    }

    public void setYellowTime(int yellowTime) {
        if (yellowTime < 1) {
            throw new IllegalArgumentException("yellowTime must be > 0");
        } else {
            this.yellowTime = yellowTime;
        }
    }

    public void createIntersection(String id)
            throws IllegalArgumentException {
        if (id.contains(":") || id.isBlank()) {
            throw new IllegalArgumentException();
        }

        for (Intersection currentIntersection: intersections) {
            if (currentIntersection.getId().equals(id)) {
                throw new IllegalArgumentException();
            }
        }

        Intersection intersection = new Intersection(id);
        intersections.add(intersection);
    }

    public void connectIntersections(String from,
                                      String to,
                                      int defaultSpeed)
            throws IntersectionNotFoundException,
            IllegalStateException,
            IllegalArgumentException {
        if (defaultSpeed < 0) {
            throw new IllegalArgumentException();
        }

        for (Intersection toIntersection: intersections) {
            if (toIntersection.getId().equals(to)) {
                for (Intersection fromIntersection: intersections) {
                    if (fromIntersection.getId().equals(from)) {
                        // If it throws RouteNotFoundException, it adds a new connection
                        // Otherwise it throws IllegalStateException
                        try {
                            toIntersection.getConnection(fromIntersection);
                            throw new IllegalStateException();
                        } catch (RouteNotFoundException r) {
                            toIntersection.addConnection(fromIntersection, defaultSpeed);
                        }
                    } else {
                        throw new IntersectionNotFoundException();
                    }
                }
            } else {
                throw new IntersectionNotFoundException();
            }
        }
    }

    public void addLights(String intersectionId,
                           int duration,
                           List<String> intersectionOrder)
            throws IntersectionNotFoundException,
            InvalidOrderException,
            IllegalArgumentException {
        int indexOfIntersection = -1;

        for (Intersection currentIntersection: intersections) {
            if (currentIntersection.getId().equals(intersectionId)) {
                indexOfIntersection = intersections.indexOf(currentIntersection);
            } else {
                throw new IntersectionNotFoundException();
            }
        }

        if (intersectionOrder.isEmpty()) {
            throw new InvalidOrderException();
        }

        if (duration < yellowTime + 1) {
            throw new IllegalArgumentException();
        }

        List<Route> routeList = new ArrayList<>(intersectionOrder.size());

        for (String currentIntersection: intersectionOrder) {
            try {
                routeList.add(this.getConnection(currentIntersection, intersectionId));
            } catch (RouteNotFoundException r) {
                //
            } catch (IntersectionNotFoundException i) {
                //
            }
        }

        // if the order specified is not a permutation of the intersection's incoming routes;
        for (Route route: intersections.get(indexOfIntersection).getConnections()) {
            if (!routeList.contains(route)) {
                throw new InvalidOrderException();
            }
        }


        intersections.get(indexOfIntersection).addTrafficLights(routeList, yellowTime, duration);
    }

    public void addSpeedSign(String from,
                              String to,
                              int initialSpeed)
            throws IntersectionNotFoundException,
            RouteNotFoundException {
        if (initialSpeed < 0) {
            throw new IllegalArgumentException();
        }

        for (Intersection toIntersection: intersections) {
            if (toIntersection.getId().equals(to)) {
                for (Intersection fromIntersection: intersections) {
                    if (fromIntersection.getId().equals(from)) {
                        try {
                            toIntersection.getConnection(fromIntersection).addSpeedSign(initialSpeed);
                        } catch (RouteNotFoundException r) {
                        }
                    } else {
                        throw new IntersectionNotFoundException();
                    }
                }
            } else {
                throw new IntersectionNotFoundException();
            }
        }
    }

    public void setSpeedLimit(String from,
                               String to,
                               int newLimit)
            throws IntersectionNotFoundException,
            RouteNotFoundException {
        if (newLimit < 0) {
            throw new IllegalArgumentException();
        }

        if (getConnection(from, to).hasSpeedSign()) {
            getConnection(from, to).setSpeedLimit(newLimit);
        } else {
            throw new IllegalStateException();
        }
    }

    public void changeLightDuration(String intersectionId,
                                     int duration)
            throws IntersectionNotFoundException {
        //stub
    }

    public Route getConnection(String from,
                               String to)
            throws IntersectionNotFoundException,
            RouteNotFoundException {
        return null;
    }

    public void addSensor(String from,
                           String to,
                           Sensor sensor)
            throws DuplicateSensorException,
            IntersectionNotFoundException,
            RouteNotFoundException {
        //stub
    }

    public int getCongestion(String from,
                              String to)
            throws IntersectionNotFoundException,
            RouteNotFoundException {
        return 0;
    }

    public Intersection findIntersection(String id)
            throws IntersectionNotFoundException {
        return null;
    }

    public void makeTwoWay(String from,
                            String to)
            throws IntersectionNotFoundException,
            RouteNotFoundException {
        //stub
    }

    public boolean equals(Object obj) {
        return false;
    }

    public int hashCode() {
        return 0;
    }

    public String toString() {
        return null;
    }

    public List<Intersection> getIntersections() {
        return null;
    }
}
